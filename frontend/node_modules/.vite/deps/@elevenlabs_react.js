import {
  require_react
} from "./chunk-ROPXWNGF.js";
import {
  __toESM
} from "./chunk-EWTE5DHJ.js";

// node_modules/@elevenlabs/react/dist/lib.modern.js
var import_react = __toESM(require_react());

// node_modules/@elevenlabs/client/dist/lib.modern.js
function e() {
  return e = Object.assign ? Object.assign.bind() : function(e3) {
    for (var t3 = 1; t3 < arguments.length; t3++) {
      var n3 = arguments[t3];
      for (var s2 in n3) ({}).hasOwnProperty.call(n3, s2) && (e3[s2] = n3[s2]);
    }
    return e3;
  }, e.apply(null, arguments);
}
var t = new Uint8Array(0);
var n = class {
  static getFullOptions(t3) {
    return e({ clientTools: {}, onConnect: () => {
    }, onDebug: () => {
    }, onDisconnect: () => {
    }, onError: () => {
    }, onMessage: () => {
    }, onAudio: () => {
    }, onModeChange: () => {
    }, onStatusChange: () => {
    }, onCanSendFeedbackChange: () => {
    } }, t3);
  }
  constructor(e3, t3) {
    var n3 = this;
    this.options = void 0, this.connection = void 0, this.lastInterruptTimestamp = 0, this.mode = "listening", this.status = "connecting", this.volume = 1, this.currentEventId = 1, this.lastFeedbackEventId = 1, this.canSendFeedback = false, this.endSessionWithDetails = async function(e4) {
      "connected" !== n3.status && "connecting" !== n3.status || (n3.updateStatus("disconnecting"), await n3.handleEndSession(), n3.updateStatus("disconnected"), n3.options.onDisconnect(e4));
    }, this.onMessage = async function(e4) {
      switch (e4.type) {
        case "interruption":
          return void n3.handleInterruption(e4);
        case "agent_response":
          return void n3.handleAgentResponse(e4);
        case "user_transcript":
          return void n3.handleUserTranscript(e4);
        case "internal_tentative_agent_response":
          return void n3.handleTentativeAgentResponse(e4);
        case "client_tool_call":
          return void await n3.handleClientToolCall(e4);
        case "audio":
          return void n3.handleAudio(e4);
        case "ping":
          return void n3.connection.sendMessage({ type: "pong", event_id: e4.ping_event.event_id });
        default:
          return void n3.options.onDebug(e4);
      }
    }, this.setVolume = ({ volume: e4 }) => {
      this.volume = e4;
    }, this.options = e3, this.connection = t3, this.options.onConnect({ conversationId: t3.conversationId }), this.connection.onMessage(this.onMessage), this.connection.onDisconnect(this.endSessionWithDetails), this.updateStatus("connected");
  }
  endSession() {
    return this.endSessionWithDetails({ reason: "user" });
  }
  async handleEndSession() {
    this.connection.close();
  }
  updateMode(e3) {
    e3 !== this.mode && (this.mode = e3, this.options.onModeChange({ mode: e3 }));
  }
  updateStatus(e3) {
    e3 !== this.status && (this.status = e3, this.options.onStatusChange({ status: e3 }));
  }
  updateCanSendFeedback() {
    const e3 = this.currentEventId !== this.lastFeedbackEventId;
    this.canSendFeedback !== e3 && (this.canSendFeedback = e3, this.options.onCanSendFeedbackChange({ canSendFeedback: e3 }));
  }
  handleInterruption(e3) {
    e3.interruption_event && (this.lastInterruptTimestamp = e3.interruption_event.event_id);
  }
  handleAgentResponse(e3) {
    this.options.onMessage({ source: "ai", message: e3.agent_response_event.agent_response });
  }
  handleUserTranscript(e3) {
    this.options.onMessage({ source: "user", message: e3.user_transcription_event.user_transcript });
  }
  handleTentativeAgentResponse(e3) {
    this.options.onDebug({ type: "tentative_agent_response", response: e3.tentative_agent_response_internal_event.tentative_agent_response });
  }
  async handleClientToolCall(e3) {
    if (this.options.clientTools.hasOwnProperty(e3.client_tool_call.tool_name)) try {
      var t3;
      const n3 = null != (t3 = await this.options.clientTools[e3.client_tool_call.tool_name](e3.client_tool_call.parameters)) ? t3 : "Client tool execution successful.", s2 = "object" == typeof n3 ? JSON.stringify(n3) : String(n3);
      this.connection.sendMessage({ type: "client_tool_result", tool_call_id: e3.client_tool_call.tool_call_id, result: s2, is_error: false });
    } catch (t4) {
      this.onError("Client tool execution failed with following error: " + (null == t4 ? void 0 : t4.message), { clientToolName: e3.client_tool_call.tool_name }), this.connection.sendMessage({ type: "client_tool_result", tool_call_id: e3.client_tool_call.tool_call_id, result: "Client tool execution failed: " + (null == t4 ? void 0 : t4.message), is_error: true });
    }
    else {
      if (this.options.onUnhandledClientToolCall) return void this.options.onUnhandledClientToolCall(e3.client_tool_call);
      this.onError(`Client tool with name ${e3.client_tool_call.tool_name} is not defined on client`, { clientToolName: e3.client_tool_call.tool_name }), this.connection.sendMessage({ type: "client_tool_result", tool_call_id: e3.client_tool_call.tool_call_id, result: `Client tool with name ${e3.client_tool_call.tool_name} is not defined on client`, is_error: true });
    }
  }
  handleAudio(e3) {
  }
  onError(e3, t3) {
    console.error(e3, t3), this.options.onError(e3, t3);
  }
  getId() {
    return this.connection.conversationId;
  }
  isOpen() {
    return "connected" === this.status;
  }
  setMicMuted(e3) {
  }
  getInputByteFrequencyData() {
    return t;
  }
  getOutputByteFrequencyData() {
    return t;
  }
  getInputVolume() {
    return 0;
  }
  getOutputVolume() {
    return 0;
  }
  sendFeedback(e3) {
    this.canSendFeedback ? (this.connection.sendMessage({ type: "feedback", score: e3 ? "like" : "dislike", event_id: this.currentEventId }), this.lastFeedbackEventId = this.currentEventId, this.updateCanSendFeedback()) : console.warn(0 === this.lastFeedbackEventId ? "Cannot send feedback: the conversation has not started yet." : "Cannot send feedback: feedback has already been sent for the current response.");
  }
  sendContextualUpdate(e3) {
    this.connection.sendMessage({ type: "contextual_update", text: e3 });
  }
  sendUserMessage(e3) {
    this.connection.sendMessage({ type: "user_message", text: e3 });
  }
  sendUserActivity() {
    this.connection.sendMessage({ type: "user_activity" });
  }
  sendMCPToolApprovalResult(e3, t3) {
    this.connection.sendMessage({ type: "mcp_tool_approval_result", tool_call_id: e3, is_approved: t3 });
  }
};
function s(e3) {
  return !!e3.type;
}
var a = class _a {
  static async create(e3) {
    let t3 = null;
    try {
      var n3;
      const i3 = null != (n3 = e3.origin) ? n3 : "wss://api.elevenlabs.io", r2 = e3.signedUrl ? e3.signedUrl : i3 + "/v1/convai/conversation?agent_id=" + e3.agentId, l3 = ["convai"];
      e3.authorization && l3.push(`bearer.${e3.authorization}`), t3 = new WebSocket(r2, l3);
      const c2 = await new Promise((n4, a3) => {
        t3.addEventListener("open", () => {
          var n5;
          const s2 = { type: "conversation_initiation_client_data" };
          var a4, o2, i4, r3, l4;
          e3.overrides && (s2.conversation_config_override = { agent: { prompt: null == (a4 = e3.overrides.agent) ? void 0 : a4.prompt, first_message: null == (o2 = e3.overrides.agent) ? void 0 : o2.firstMessage, language: null == (i4 = e3.overrides.agent) ? void 0 : i4.language }, tts: { voice_id: null == (r3 = e3.overrides.tts) ? void 0 : r3.voiceId }, conversation: { text_only: null == (l4 = e3.overrides.conversation) ? void 0 : l4.textOnly } }), e3.customLlmExtraBody && (s2.custom_llm_extra_body = e3.customLlmExtraBody), e3.dynamicVariables && (s2.dynamic_variables = e3.dynamicVariables), null == (n5 = t3) || n5.send(JSON.stringify(s2));
        }, { once: true }), t3.addEventListener("error", (e4) => {
          setTimeout(() => a3(e4), 0);
        }), t3.addEventListener("close", a3), t3.addEventListener("message", (e4) => {
          const t4 = JSON.parse(e4.data);
          s(t4) && ("conversation_initiation_metadata" === t4.type ? n4(t4.conversation_initiation_metadata_event) : console.warn("First received message is not conversation metadata."));
        }, { once: true });
      }), { conversation_id: u3, agent_output_audio_format: d2, user_input_audio_format: h2 } = c2, p2 = o(null != h2 ? h2 : "pcm_16000"), m2 = o(d2);
      return new _a(t3, u3, p2, m2);
    } catch (e4) {
      var i2;
      throw null == (i2 = t3) || i2.close(), e4;
    }
  }
  constructor(e3, t3, n3, a3) {
    this.socket = void 0, this.conversationId = void 0, this.inputFormat = void 0, this.outputFormat = void 0, this.queue = [], this.disconnectionDetails = null, this.onDisconnectCallback = null, this.onMessageCallback = null, this.socket = e3, this.conversationId = t3, this.inputFormat = n3, this.outputFormat = a3, this.socket.addEventListener("error", (e4) => {
      setTimeout(() => this.disconnect({ reason: "error", message: "The connection was closed due to a socket error.", context: e4 }), 0);
    }), this.socket.addEventListener("close", (e4) => {
      this.disconnect(1e3 === e4.code ? { reason: "agent", context: e4 } : { reason: "error", message: e4.reason || "The connection was closed by the server.", context: e4 });
    }), this.socket.addEventListener("message", (e4) => {
      try {
        const t4 = JSON.parse(e4.data);
        if (!s(t4)) return;
        this.onMessageCallback ? this.onMessageCallback(t4) : this.queue.push(t4);
      } catch (e5) {
      }
    });
  }
  close() {
    this.socket.close();
  }
  sendMessage(e3) {
    this.socket.send(JSON.stringify(e3));
  }
  onMessage(e3) {
    this.onMessageCallback = e3;
    const t3 = this.queue;
    this.queue = [], t3.length > 0 && queueMicrotask(() => {
      t3.forEach(e3);
    });
  }
  onDisconnect(e3) {
    this.onDisconnectCallback = e3;
    const t3 = this.disconnectionDetails;
    t3 && queueMicrotask(() => {
      e3(t3);
    });
  }
  disconnect(e3) {
    var t3;
    this.disconnectionDetails || (this.disconnectionDetails = e3, null == (t3 = this.onDisconnectCallback) || t3.call(this, e3));
  }
};
function o(e3) {
  const [t3, n3] = e3.split("_");
  if (!["pcm", "ulaw"].includes(t3)) throw new Error(`Invalid format: ${e3}`);
  const s2 = parseInt(n3);
  if (isNaN(s2)) throw new Error(`Invalid sample rate: ${n3}`);
  return { format: t3, sampleRate: s2 };
}
function i() {
  return ["iPad Simulator", "iPhone Simulator", "iPod Simulator", "iPad", "iPhone", "iPod"].includes(navigator.platform) || navigator.userAgent.includes("Mac") && "ontouchend" in document;
}
async function r(e3 = { default: 0, android: 3e3 }) {
  let t3 = e3.default;
  var n3;
  if (/android/i.test(navigator.userAgent)) t3 = null != (n3 = e3.android) ? n3 : t3;
  else if (i()) {
    var s2;
    t3 = null != (s2 = e3.ios) ? s2 : t3;
  }
  t3 > 0 && await new Promise((e4) => setTimeout(e4, t3));
}
var l = class _l extends n {
  static async startSession(e3) {
    const t3 = n.getFullOptions(e3);
    t3.onStatusChange({ status: "connecting" }), t3.onCanSendFeedbackChange({ canSendFeedback: false });
    let s2 = null;
    try {
      return await r(t3.connectionDelay), s2 = await a.create(e3), new _l(t3, s2);
    } catch (e4) {
      var o2;
      throw t3.onStatusChange({ status: "disconnected" }), null == (o2 = s2) || o2.close(), e4;
    }
  }
};
function c(e3) {
  const t3 = new Uint8Array(e3);
  return window.btoa(String.fromCharCode(...t3));
}
function u(e3) {
  const t3 = window.atob(e3), n3 = t3.length, s2 = new Uint8Array(n3);
  for (let e4 = 0; e4 < n3; e4++) s2[e4] = t3.charCodeAt(e4);
  return s2.buffer;
}
var d = /* @__PURE__ */ new Map();
function h(e3, t3) {
  return async (n3) => {
    const s2 = d.get(e3);
    if (s2) return n3.addModule(s2);
    const a3 = new Blob([t3], { type: "application/javascript" }), o2 = URL.createObjectURL(a3);
    try {
      return await n3.addModule(o2), void d.set(e3, o2);
    } catch (e4) {
      URL.revokeObjectURL(o2);
    }
    try {
      const s3 = `data:application/javascript;base64,${btoa(t3)}`;
      await n3.addModule(s3), d.set(e3, s3);
    } catch (t4) {
      throw new Error(`Failed to load the ${e3} worklet module. Make sure the browser supports AudioWorklets.`);
    }
  };
}
var p = h("raw-audio-processor", `
const BIAS = 0x84;
const CLIP = 32635;
const encodeTable = [
  0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,
  4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
  5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
  6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
  6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
  6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
  6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7
];

function encodeSample(sample) {
  let sign;
  let exponent;
  let mantissa;
  let muLawSample;
  sign = (sample >> 8) & 0x80;
  if (sign !== 0) sample = -sample;
  sample = sample + BIAS;
  if (sample > CLIP) sample = CLIP;
  exponent = encodeTable[(sample>>7) & 0xFF];
  mantissa = (sample >> (exponent+3)) & 0x0F;
  muLawSample = ~(sign | (exponent << 4) | mantissa);
  
  return muLawSample;
}

class RawAudioProcessor extends AudioWorkletProcessor {
  constructor() {
    super();
              
    this.port.onmessage = ({ data }) => {
      switch (data.type) {
        case "setFormat":
          this.isMuted = false;
          this.buffer = []; // Initialize an empty buffer
          this.bufferSize = data.sampleRate / 4;
          this.format = data.format;

          if (globalThis.LibSampleRate && sampleRate !== data.sampleRate) {
            globalThis.LibSampleRate.create(1, sampleRate, data.sampleRate).then(resampler => {
              this.resampler = resampler;
            });
          }
          break;
        case "setMuted":
          this.isMuted = data.isMuted;
          break;
      }
    };
  }
  process(inputs) {
    if (!this.buffer) {
      return true;
    }
    
    const input = inputs[0]; // Get the first input node
    if (input.length > 0) {
      let channelData = input[0]; // Get the first channel's data

      // Resample the audio if necessary
      if (this.resampler) {
        channelData = this.resampler.full(channelData);
      }

      // Add channel data to the buffer
      this.buffer.push(...channelData);
      // Get max volume 
      let sum = 0.0;
      for (let i = 0; i < channelData.length; i++) {
        sum += channelData[i] * channelData[i];
      }
      const maxVolume = Math.sqrt(sum / channelData.length);
      // Check if buffer size has reached or exceeded the threshold
      if (this.buffer.length >= this.bufferSize) {
        const float32Array = this.isMuted 
          ? new Float32Array(this.buffer.length)
          : new Float32Array(this.buffer);

        let encodedArray = this.format === "ulaw"
          ? new Uint8Array(float32Array.length)
          : new Int16Array(float32Array.length);

        // Iterate through the Float32Array and convert each sample to PCM16
        for (let i = 0; i < float32Array.length; i++) {
          // Clamp the value to the range [-1, 1]
          let sample = Math.max(-1, Math.min(1, float32Array[i]));

          // Scale the sample to the range [-32768, 32767]
          let value = sample < 0 ? sample * 32768 : sample * 32767;
          if (this.format === "ulaw") {
            value = encodeSample(Math.round(value));
          }

          encodedArray[i] = value;
        }

        // Send the buffered data to the main script
        this.port.postMessage([encodedArray, maxVolume]);

        // Clear the buffer after sending
        this.buffer = [];
      }
    }
    return true; // Continue processing
  }
}
registerProcessor("raw-audio-processor", RawAudioProcessor);
`);
var m = class _m {
  static async create({ sampleRate: e3, format: t3, preferHeadphonesForIosDevices: n3 }) {
    let s2 = null, a3 = null;
    try {
      const o3 = { sampleRate: { ideal: e3 }, echoCancellation: { ideal: true }, noiseSuppression: { ideal: true } };
      if (i() && n3) {
        const e4 = (await window.navigator.mediaDevices.enumerateDevices()).find((e5) => "audioinput" === e5.kind && ["airpod", "headphone", "earphone"].find((t4) => e5.label.toLowerCase().includes(t4)));
        e4 && (o3.deviceId = { ideal: e4.deviceId });
      }
      const r3 = navigator.mediaDevices.getSupportedConstraints().sampleRate;
      s2 = new window.AudioContext(r3 ? { sampleRate: e3 } : {});
      const l3 = s2.createAnalyser();
      r3 || await s2.audioWorklet.addModule("https://cdn.jsdelivr.net/npm/@alexanderolsen/libsamplerate-js@2.1.2/dist/libsamplerate.worklet.js"), await p(s2.audioWorklet), a3 = await navigator.mediaDevices.getUserMedia({ audio: o3 });
      const c2 = s2.createMediaStreamSource(a3), u3 = new AudioWorkletNode(s2, "raw-audio-processor");
      return u3.port.postMessage({ type: "setFormat", format: t3, sampleRate: e3 }), c2.connect(l3), l3.connect(u3), await s2.resume(), new _m(s2, l3, u3, a3);
    } catch (e4) {
      var o2, r2;
      throw null == (o2 = a3) || o2.getTracks().forEach((e5) => e5.stop()), null == (r2 = s2) || r2.close(), e4;
    }
  }
  constructor(e3, t3, n3, s2) {
    this.context = void 0, this.analyser = void 0, this.worklet = void 0, this.inputStream = void 0, this.context = e3, this.analyser = t3, this.worklet = n3, this.inputStream = s2;
  }
  async close() {
    this.inputStream.getTracks().forEach((e3) => e3.stop()), await this.context.close();
  }
  setMuted(e3) {
    this.worklet.port.postMessage({ type: "setMuted", isMuted: e3 });
  }
};
var f = h("audio-concat-processor", '\nconst decodeTable = [0,132,396,924,1980,4092,8316,16764];\n\nexport function decodeSample(muLawSample) {\n  let sign;\n  let exponent;\n  let mantissa;\n  let sample;\n  muLawSample = ~muLawSample;\n  sign = (muLawSample & 0x80);\n  exponent = (muLawSample >> 4) & 0x07;\n  mantissa = muLawSample & 0x0F;\n  sample = decodeTable[exponent] + (mantissa << (exponent+3));\n  if (sign !== 0) sample = -sample;\n\n  return sample;\n}\n\nclass AudioConcatProcessor extends AudioWorkletProcessor {\n  constructor() {\n    super();\n    this.buffers = []; // Initialize an empty buffer\n    this.cursor = 0;\n    this.currentBuffer = null;\n    this.wasInterrupted = false;\n    this.finished = false;\n    \n    this.port.onmessage = ({ data }) => {\n      switch (data.type) {\n        case "setFormat":\n          this.format = data.format;\n          break;\n        case "buffer":\n          this.wasInterrupted = false;\n          this.buffers.push(\n            this.format === "ulaw"\n              ? new Uint8Array(data.buffer)\n              : new Int16Array(data.buffer)\n          );\n          break;\n        case "interrupt":\n          this.wasInterrupted = true;\n          break;\n        case "clearInterrupted":\n          if (this.wasInterrupted) {\n            this.wasInterrupted = false;\n            this.buffers = [];\n            this.currentBuffer = null;\n          }\n      }\n    };\n  }\n  process(_, outputs) {\n    let finished = false;\n    const output = outputs[0][0];\n    for (let i = 0; i < output.length; i++) {\n      if (!this.currentBuffer) {\n        if (this.buffers.length === 0) {\n          finished = true;\n          break;\n        }\n        this.currentBuffer = this.buffers.shift();\n        this.cursor = 0;\n      }\n\n      let value = this.currentBuffer[this.cursor];\n      if (this.format === "ulaw") {\n        value = decodeSample(value);\n      }\n      output[i] = value / 32768;\n      this.cursor++;\n\n      if (this.cursor >= this.currentBuffer.length) {\n        this.currentBuffer = null;\n      }\n    }\n\n    if (this.finished !== finished) {\n      this.finished = finished;\n      this.port.postMessage({ type: "process", finished });\n    }\n\n    return true; // Continue processing\n  }\n}\n\nregisterProcessor("audio-concat-processor", AudioConcatProcessor);\n');
var g = class _g {
  static async create({ sampleRate: e3, format: t3 }) {
    let n3 = null;
    try {
      n3 = new AudioContext({ sampleRate: e3 });
      const s3 = n3.createAnalyser(), a3 = n3.createGain();
      a3.connect(s3), s3.connect(n3.destination), await f(n3.audioWorklet);
      const o2 = new AudioWorkletNode(n3, "audio-concat-processor");
      return o2.port.postMessage({ type: "setFormat", format: t3 }), o2.connect(a3), await n3.resume(), new _g(n3, s3, a3, o2);
    } catch (e4) {
      var s2;
      throw null == (s2 = n3) || s2.close(), e4;
    }
  }
  constructor(e3, t3, n3, s2) {
    this.context = void 0, this.analyser = void 0, this.gain = void 0, this.worklet = void 0, this.context = e3, this.analyser = t3, this.gain = n3, this.worklet = s2;
  }
  async close() {
    await this.context.close();
  }
};
var v = class _v extends n {
  static async startSession(t3) {
    var s2;
    const o2 = n.getFullOptions(t3);
    o2.onStatusChange({ status: "connecting" }), o2.onCanSendFeedbackChange({ canSendFeedback: false });
    let i2 = null, l3 = null, c2 = null, u3 = null, d2 = null;
    if (null == (s2 = t3.useWakeLock) || s2) try {
      d2 = await navigator.wakeLock.request("screen");
    } catch (e3) {
    }
    try {
      var h2;
      return u3 = await navigator.mediaDevices.getUserMedia({ audio: true }), await r(o2.connectionDelay), l3 = await a.create(t3), [i2, c2] = await Promise.all([m.create(e({}, l3.inputFormat, { preferHeadphonesForIosDevices: t3.preferHeadphonesForIosDevices })), g.create(l3.outputFormat)]), null == (h2 = u3) || h2.getTracks().forEach((e3) => e3.stop()), u3 = null, new _v(o2, l3, i2, c2, d2);
    } catch (e3) {
      var p2, f2, y2, w2;
      o2.onStatusChange({ status: "disconnected" }), null == (p2 = u3) || p2.getTracks().forEach((e4) => e4.stop()), null == (f2 = l3) || f2.close(), await (null == (y2 = i2) ? void 0 : y2.close()), await (null == (w2 = c2) ? void 0 : w2.close());
      try {
        var _;
        await (null == (_ = d2) ? void 0 : _.release()), d2 = null;
      } catch (e4) {
      }
      throw e3;
    }
  }
  constructor(e3, t3, n3, s2, a3) {
    super(e3, t3), this.input = void 0, this.output = void 0, this.wakeLock = void 0, this.inputFrequencyData = void 0, this.outputFrequencyData = void 0, this.onInputWorkletMessage = (e4) => {
      "connected" === this.status && this.connection.sendMessage({ user_audio_chunk: c(e4.data[0].buffer) });
    }, this.onOutputWorkletMessage = ({ data: e4 }) => {
      "process" === e4.type && this.updateMode(e4.finished ? "listening" : "speaking");
    }, this.addAudioBase64Chunk = (e4) => {
      this.output.gain.gain.value = this.volume, this.output.worklet.port.postMessage({ type: "clearInterrupted" }), this.output.worklet.port.postMessage({ type: "buffer", buffer: u(e4) });
    }, this.fadeOutAudio = () => {
      this.updateMode("listening"), this.output.worklet.port.postMessage({ type: "interrupt" }), this.output.gain.gain.exponentialRampToValueAtTime(1e-4, this.output.context.currentTime + 2), setTimeout(() => {
        this.output.gain.gain.value = this.volume, this.output.worklet.port.postMessage({ type: "clearInterrupted" });
      }, 2e3);
    }, this.calculateVolume = (e4) => {
      if (0 === e4.length) return 0;
      let t4 = 0;
      for (let n4 = 0; n4 < e4.length; n4++) t4 += e4[n4] / 255;
      return t4 /= e4.length, t4 < 0 ? 0 : t4 > 1 ? 1 : t4;
    }, this.input = n3, this.output = s2, this.wakeLock = a3, this.input.worklet.port.onmessage = this.onInputWorkletMessage, this.output.worklet.port.onmessage = this.onOutputWorkletMessage;
  }
  async handleEndSession() {
    await super.handleEndSession();
    try {
      var e3;
      await (null == (e3 = this.wakeLock) ? void 0 : e3.release()), this.wakeLock = null;
    } catch (e4) {
    }
    await this.input.close(), await this.output.close();
  }
  handleInterruption(e3) {
    super.handleInterruption(e3), this.fadeOutAudio();
  }
  handleAudio(e3) {
    this.lastInterruptTimestamp <= e3.audio_event.event_id && (this.options.onAudio(e3.audio_event.audio_base_64), this.addAudioBase64Chunk(e3.audio_event.audio_base_64), this.currentEventId = e3.audio_event.event_id, this.updateCanSendFeedback(), this.updateMode("speaking"));
  }
  setMicMuted(e3) {
    this.input.setMuted(e3);
  }
  getInputByteFrequencyData() {
    return null != this.inputFrequencyData || (this.inputFrequencyData = new Uint8Array(this.input.analyser.frequencyBinCount)), this.input.analyser.getByteFrequencyData(this.inputFrequencyData), this.inputFrequencyData;
  }
  getOutputByteFrequencyData() {
    return null != this.outputFrequencyData || (this.outputFrequencyData = new Uint8Array(this.output.analyser.frequencyBinCount)), this.output.analyser.getByteFrequencyData(this.outputFrequencyData), this.outputFrequencyData;
  }
  getInputVolume() {
    return this.calculateVolume(this.getInputByteFrequencyData());
  }
  getOutputVolume() {
    return this.calculateVolume(this.getOutputByteFrequencyData());
  }
};
function y(e3, t3, n3 = "https://api.elevenlabs.io") {
  return fetch(`${n3}/v1/convai/conversations/${e3}/feedback`, { method: "POST", body: JSON.stringify({ feedback: t3 ? "like" : "dislike" }), headers: { "Content-Type": "application/json" } });
}
var w = class extends n {
  static startSession(e3) {
    return e3.textOnly ? l.startSession(e3) : v.startSession(e3);
  }
};

// node_modules/@elevenlabs/react/dist/lib.modern.js
function u2() {
  return u2 = Object.assign ? Object.assign.bind() : function(e3) {
    for (var n3 = 1; n3 < arguments.length; n3++) {
      var t3 = arguments[n3];
      for (var r2 in t3) ({}).hasOwnProperty.call(t3, r2) && (e3[r2] = t3[r2]);
    }
    return e3;
  }, u2.apply(null, arguments);
}
var l2 = ["micMuted", "volume"];
function a2(a3 = {}) {
  const { micMuted: c2, volume: o2 } = a3, s2 = function(e3, n3) {
    if (null == e3) return {};
    var t3 = {};
    for (var r2 in e3) if ({}.hasOwnProperty.call(e3, r2)) {
      if (n3.includes(r2)) continue;
      t3[r2] = e3[r2];
    }
    return t3;
  }(a3, l2), i2 = (0, import_react.useRef)(null), d2 = (0, import_react.useRef)(null), [v2, p2] = (0, import_react.useState)("disconnected"), [g2, m2] = (0, import_react.useState)(false), [y2, f2] = (0, import_react.useState)("listening");
  return (0, import_react.useEffect)(() => {
    var e3;
    void 0 !== c2 && (null == i2 || null == (e3 = i2.current) || e3.setMicMuted(c2));
  }, [c2]), (0, import_react.useEffect)(() => {
    var e3;
    void 0 !== o2 && (null == i2 || null == (e3 = i2.current) || e3.setVolume({ volume: o2 }));
  }, [o2]), (0, import_react.useEffect)(() => () => {
    var e3;
    null == (e3 = i2.current) || e3.endSession();
  }, []), { startSession: async (e3) => {
    var n3;
    if (null != (n3 = i2.current) && n3.isOpen()) return i2.current.getId();
    if (d2.current) return (await d2.current).getId();
    try {
      return d2.current = w.startSession(u2({}, null != s2 ? s2 : {}, null != e3 ? e3 : {}, { onModeChange: ({ mode: e4 }) => {
        f2(e4);
      }, onStatusChange: ({ status: e4 }) => {
        p2(e4);
      }, onCanSendFeedbackChange: ({ canSendFeedback: e4 }) => {
        m2(e4);
      } })), i2.current = await d2.current, void 0 !== c2 && i2.current.setMicMuted(c2), void 0 !== o2 && i2.current.setVolume({ volume: o2 }), i2.current.getId();
    } finally {
      d2.current = null;
    }
  }, endSession: async () => {
    const e3 = i2.current;
    i2.current = null, await (null == e3 ? void 0 : e3.endSession());
  }, setVolume: ({ volume: e3 }) => {
    var n3;
    null == (n3 = i2.current) || n3.setVolume({ volume: e3 });
  }, getInputByteFrequencyData: () => {
    var e3;
    return null == (e3 = i2.current) ? void 0 : e3.getInputByteFrequencyData();
  }, getOutputByteFrequencyData: () => {
    var e3;
    return null == (e3 = i2.current) ? void 0 : e3.getOutputByteFrequencyData();
  }, getInputVolume: () => {
    var e3, n3;
    return null != (e3 = null == (n3 = i2.current) ? void 0 : n3.getInputVolume()) ? e3 : 0;
  }, getOutputVolume: () => {
    var e3, n3;
    return null != (e3 = null == (n3 = i2.current) ? void 0 : n3.getOutputVolume()) ? e3 : 0;
  }, sendFeedback: (e3) => {
    var n3;
    null == (n3 = i2.current) || n3.sendFeedback(e3);
  }, getId: () => {
    var e3;
    return null == (e3 = i2.current) ? void 0 : e3.getId();
  }, sendContextualUpdate: (e3) => {
    var n3;
    null == (n3 = i2.current) || n3.sendContextualUpdate(e3);
  }, sendUserMessage: (e3) => {
    var n3;
    null == (n3 = i2.current) || n3.sendUserMessage(e3);
  }, sendUserActivity: () => {
    var e3;
    null == (e3 = i2.current) || e3.sendUserActivity();
  }, sendMCPToolApprovalResult: (e3, n3) => {
    var t3;
    null == (t3 = i2.current) || t3.sendMCPToolApprovalResult(e3, n3);
  }, status: v2, canSendFeedback: g2, micMuted: c2, isSpeaking: "speaking" === y2 };
}
export {
  y as postOverallFeedback,
  a2 as useConversation
};
//# sourceMappingURL=@elevenlabs_react.js.map
